// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace OpenHouse.Model.Core
{
    public partial class OpenhouseContext : DbContext
    {
        public OpenhouseContext()
        {
        }

        public OpenhouseContext(DbContextOptions<OpenhouseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Property> Property { get; set; }
        public virtual DbSet<Propertyclass> Propertyclass { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Property>(entity =>
            {
                entity.ToTable("property");

                entity.HasIndex(e => e.PropertyClassId)
                    .HasName("propertyClassId");

                entity.Property(e => e.PropertyId)
                    .HasColumnName("propertyId")
                    .HasColumnType("int(11)");

                entity.Property(e => e.Address1)
                    .HasColumnName("address1")
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Address2)
                    .HasColumnName("address2")
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Address3)
                    .HasColumnName("address3")
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Address4)
                    .HasColumnName("address4")
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DemolitionDate)
                    .HasColumnName("demolitionDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PostCode)
                    .HasColumnName("postCode")
                    .HasColumnType("varchar(8)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PropertyClassId)
                    .HasColumnName("propertyClassId")
                    .HasColumnType("int(11)");

                entity.Property(e => e.PropertyNum)
                    .HasColumnName("propertyNum")
                    .HasColumnType("int(11)");

                entity.Property(e => e.PropertySubNum)
                    .HasColumnName("propertySubNum")
                    .HasColumnType("varchar(5)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.PropertyClass)
                    .WithMany(p => p.Property)
                    .HasForeignKey(d => d.PropertyClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("property_ibfk_1");
            });

            modelBuilder.Entity<Propertyclass>(entity =>
            {
                entity.ToTable("propertyclass");

                entity.Property(e => e.PropertyClassId)
                    .HasColumnName("propertyClassId")
                    .HasColumnType("int(11)");

                entity.Property(e => e.PropertyClass1)
                    .HasColumnName("propertyClass")
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}